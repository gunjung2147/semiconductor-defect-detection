Given your target audience (beginner undergraduates), preference for hands-on learning, short timeline, and the need for an appealing presentation, here’s a streamlined and impactful plan:

Project Plan: Interactive Wafer Map Classifier Web App

Objective:

Create a simple and visually engaging web app that allows students to upload wafer maps, classify defect types, and learn about their causes and implications.

What You’ll Deliver:
	1.	Web App:
	•	Core Feature: Upload a wafer map → Get the defect type prediction → See an educational explanation of the defect.
	•	Bonus: Highlight predictions with visual overlays (e.g., heatmaps).
	2.	Presentation:
	•	Explain how machine learning aids defect detection in semiconductor manufacturing.
	•	Demo the app with real examples.
	•	Include visualizations to show model performance (e.g., accuracy, confusion matrix).

Step-by-Step Implementation

1. Create the Web App

Use Streamlit for simplicity and rapid development.

Key Features:
	1.	Upload and Predict:
	•	Students upload a wafer map.
	•	App predicts the defect type using a trained CNN model.
	2.	Educational Output:
	•	Display defect type with an explanation (e.g., “Donut defects indicate wafer center issues”).
	3.	Interactive Visualization:
	•	Show the input wafer map, its classification, and optionally a heatmap of model attention.

Code Example for Streamlit:

import streamlit as st
import numpy as np
import tensorflow as tf
from PIL import Image
from skimage.transform import resize

# Load the trained model
model = tf.keras.models.load_model('wafer_map_classifier.h5')

# Defect type mapping
defect_types = {
    0: "Center",
    1: "Donut",
    2: "Edge-Loc",
    3: "Edge-Ring",
    4: "Loc",
    5: "Random",
    6: "Scratch",
    7: "Near-full"
}

# Title and description
st.title("Wafer Map Defect Classifier")
st.write("Upload a wafer map image to classify its defect type and learn about the causes.")

# File uploader
uploaded_file = st.file_uploader("Upload a Wafer Map Image (PNG/JPG)", type=["png", "jpg"])

if uploaded_file:
    # Load and preprocess the image
    img = Image.open(uploaded_file).convert('L')  # Convert to grayscale
    img_resized = resize(np.array(img), (64, 64)) / 255.0  # Resize and normalize
    img_array = img_resized.reshape(1, 64, 64, 1)

    # Predict
    prediction = model.predict(img_array).argmax(axis=1)[0]
    defect_name = defect_types[prediction]

    # Display results
    st.image(img, caption="Uploaded Wafer Map", use_column_width=True)
    st.write(f"**Predicted Defect Type**: {defect_name}")
    st.write(f"**Explanation**: {defect_name} defects typically occur due to [brief cause here].")

2. Train a Basic CNN Model

Since you’re short on time, use a pre-trained model or train a simple CNN. Focus on:
	•	Basic architecture (Conv2D, MaxPooling, Dense layers).
	•	Limited epochs (5-10).
	•	Small batch size (32-64).

3. Visualize Model Insights

Add appealing visualizations to explain your project.

Key Charts:
	1.	Class Distribution:
	•	Show the dataset’s imbalance and how augmentation resolves it.
	2.	Training/Validation Accuracy:
	•	Plot model performance over epochs.
	3.	Confusion Matrix:
	•	Highlight which defects are challenging to classify.

Code for Confusion Matrix:

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

# Generate predictions
y_pred = model.predict(X_test).argmax(axis=1)

# Confusion matrix
cm = confusion_matrix(y_test_encoded, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=encoder.classes_)
disp.plot(cmap='Blues')
plt.title("Confusion Matrix")
plt.show()

4. Educational Content

Provide defect descriptions and real-world implications.

Example Table:

Defect Type	Cause	Impact
Center	Issues in wafer handling	Reduces central die yield
Donut	Misaligned exposure tools	Multiple dies affected
Edge-Loc	Edge process instability	Yield loss at wafer edges

Presentation Structure
	1.	Introduction:
	•	Explain wafer maps and defect detection challenges.
	•	Emphasize the importance of automation and AI in semiconductors.
	2.	Demo the Web App:
	•	Upload a wafer map and showcase the classification process.
	•	Explain the defect type and its real-world impact.
	3.	How It Works:
	•	Briefly outline the machine learning process:
	•	Dataset preprocessing.
	•	CNN model training.
	•	Predictions and visualizations.
	4.	Results and Insights:
	•	Show performance metrics (accuracy, confusion matrix).
	•	Highlight challenges (e.g., class imbalance).
	5.	Educational Value:
	•	Summarize how the app helps students learn:
	•	Hands-on experience with defect detection.
	•	Understanding of wafer manufacturing challenges.
	6.	Future Scope:
	•	Discuss potential improvements:
	•	Advanced models (e.g., transformers).
	•	Real-time deployment in factories.

Timeline

Task	Time Estimate
Dataset Preparation	1 day
Model Training	1 day
Web App Development	1 day
Visualization and Testing	1 day
Presentation Preparation	1 day

Final Thoughts

This project format is simple yet impactful, demonstrating a clear application of AI in semiconductors. It’s visually appealing, interactive, and educational—perfect for impressing EE professors and sparking interest among students.

Let me know if you need help with the code, visuals, or presentation slides!
